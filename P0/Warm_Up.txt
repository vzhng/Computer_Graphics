WARM-UP P0: Infinite Pentagon Looping

PROJECT DESCRIPTION
Create an interactive program that will draw a specific pattern of pentagons (five-sided polygons) next to other pentagons.  

Draw one large pentagon that has its center positioned in the exact middle of the drawing window. This should be a regular pentagon
(all sides equal length, all angles equal). One of the vertices of this pentagon should point directly upward. Let us refer to the 
distance from the center to a vertex of a pentagon as its radius. The radius of this first pentagon should be 1/4 the width of the
drawing window.

Then draw five smaller pentagons, each that has a radius that is smaller than that of the middle pentagon. To start with, make this 
smaller pentagon's radius half the radius of the middle pentagon. Each of these smaller pentagons will have its position offset from 
the middle pentagon in a different direction. Taken together, the middle pentagon and the five smaller satellite pentagons will create
a pattern that is rotationally symmetric. At first, place each of the smaller pentagons so that their centers are offset from the 
middle pentagon by 1.5 times the radius of the middle pentagon.

Pay close attention to the rotation of the pentagons. Note that closest edge of each smaller pentagon to the middle of the window is 
parallel to the closest edge of the middle pentagon. This orientation of the smaller pentagons is an essential part of the pattern 
you are to create.

The radius of the smaller pentagons should be controlled by the vertical position of the mouse cursor. Every time you move the cursor,
the pattern should be re-drawn according to the new cursor position. The radius of the smaller pentagons should be a "shrink factor" 
times the middle pentagon's radius. When the cursor is at the bottom of the screen, this shrink factor should be zero, and thus the 
smaller pentagons will be just a dot. The shrink factor should change linearly, based on the distance from the cursor to the bottom 
of the window. The maximum value of the shrink factor should be 1/2, and this value will be attained when the cursor is at the top 
of the window.

The distance of the smaller pentagons from the middle one should be controlled by the cursor’s horizontal position. Let us call the 
radius of the middle pentagon r. When the cursor is at the left of the screen, the center of the smaller pentagons should offset from 
the middle pentagon's center by a distance d = r. As the cursor moves towards the left, the value of d will be increased based on the 
cursor's horizontal position. The offset distance d = r * (1 + shift), where shift will be in the range of [0, 1]. The value of shift 
should be based linearly on the distance of the cursor from the left side of the window. When the cursor is at the middle of the screen,
shift = 1/2, so d = r * (1 + shift) = r * 1.5. When the cursor is on the far right of the window, shift = 1, and the offset d = r * 2.

Each of the smaller pentagons should in turn have four even smaller pentagons that are satellite pentagons to each of them. In total,
there will be 25 of these smaller pentagons. Each smaller pentagon should have a radius that is shrink times the radius of its “parent”
pentagon.  The offset (d) of these satellite pentagons from the center of their parent polygon should be d = rad_parent * (1 + shift), 
where shift is defined as above. This pattern of smaller pentagons will repeat several more times, and each time the sizes of the 
pentagons will be smaller. The next level of pentagons will have 125 pentagons, then 625, and so on.

Your pattern should have at least five different sizes of pentagons, from the largest to the smallest. Even though you will be drawing 
many, many pentagons, your code should include very few lines that use the beginShape(), vertex(), and endShape() functions to draw 
those pentagons.  If you find yourself using many such drawing calls, you are probably not approaching the problem correctly.

You will find the sin() and cos() functions to be useful for carrying out this assignment.
Note that Java / Processing expect radians (not degrees) for specifying angles. 
Processing has a built-in PI constant. 
The angle between adjacent vertices of a regular pentagon (with respect to the pentagon center) is 2 * PI / 5.
